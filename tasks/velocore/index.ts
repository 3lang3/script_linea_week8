import { ethers } from 'ethers';
import { lineaProvider as provider, overrides, logGasCost } from '../base'
import { swapAbi } from './abi';
import { task } from '@/utils/utils';

export const run = async (wallet: ethers.Wallet) => {
  const signer = wallet.connect(provider);
  const ca = '0x0D0AC722d0f1Ec62F2E62Dd28fac0b514c71cC92'
  const contract = new ethers.Contract(ca, swapAbi, signer);
  const amount = ethers.utils.parseEther('0.001');

  await task(async () => {
    const tx = await contract.execute(
      [
        "0x000000000000000000000000f56dc6695cf1f5c364edebc7dc7077ac9b586068",
        "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"
      ],
      [
        "0",
        "0"
      ],
      [
        {
          "poolId": "0x000000000000000000000000dbc33d6bc191403d938fd9e69197c614663efcbb",
          "tokenInformations": [
            "0x0001000000000000000000000000000000000000000000000000000000000000",
            "0x01020000000000000000000000000000000000000000000000038d7ea4c68000"
          ],
          "data": []
        }
      ],
      {
        ...await overrides(wallet.address),
        value: amount
      }
    )
    logGasCost(await tx.wait())

  }, {
    taskName: 'velocore_swap',
    walletAddr: wallet.address,
  })

  const addLiquidInputData = '0xd3115a8a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000030000000000000000000000001da851ca5c2b4a79049f4d967725b69f67b52f7f000000000000000000000000dbc33d6bc191403d938fd9e69197c614663efcbbeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000120000000000000000000000000dbc33d6bc191403d938fd9e69197c614663efcbb000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020101000000000000000000000000000000000000000000000000000000000000020200000000000000000000000000007fffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000dbc33d6bc191403d938fd9e69197c614663efcbb000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020001000000000000000000000000000000000000000000000000000000000000010200000000000000000000000000007fffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000'
  await task(async () => {
    const tx = await signer.sendTransaction({
      to: ca,
      data: addLiquidInputData,
      value: amount,
      gasLimit: 362089,
      ...await overrides(wallet.address),
    })
    logGasCost(await tx.wait())

  }, {
    taskName: 'velocore_add_liquid',
    walletAddr: wallet.address,
  })
}
